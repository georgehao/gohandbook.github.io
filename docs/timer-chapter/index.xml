<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>定时器 on Go 源码分析与实战</title>
    <link>https://www.haohongfan.com/docs/timer-chapter/</link>
    <description>Recent content in 定时器 on Go 源码分析与实战</description>
    <generator>Hugo -- gohugo.io</generator><atom:link href="https://www.haohongfan.com/docs/timer-chapter/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Timer</title>
      <link>https://www.haohongfan.com/docs/timer-chapter/2021-04-01-timer/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.haohongfan.com/docs/timer-chapter/2021-04-01-timer/</guid>
      <description>Go timer 是如何被调度的？ #  hi，大家好，我是 haohongfan。
本篇文章剖析下 Go 定时器的相关内容。定时器不管是业务开发，还是基础架构开发，都是绕不过去的存在，由此可见定时器的重要程度。
我们不管用 NewTimer, timer.After，还是 timer.AfterFun 来初始化一个 timer, 这个 timer 最终都会加入到一个全局 timer 堆中，由 Go runtime 统一管理。
全局的 timer 堆也经历过三个阶段的重要升级。
 Go 1.9 版本之前，所有的计时器由全局唯一的四叉堆维护，协程间竞争激烈。 Go 1.10 - 1.13，全局使用 64 个四叉堆维护全部的计时器，没有本质解决 1.9 版本之前的问题 Go 1.14 版本之后，每个 P 单独维护一个四叉堆。  Go 1.14 以后的 timer 性能得到了质的飞升，不过伴随而来的是 timer 成了 Go 里面最复杂、最难梳理的数据结构。本文不会详细分析每一个细节，我们从大体来了解 Go timer 的工作原理。
1. 使用场景 #  Go timer 在我们代码中会经常遇到。
场景1：RPC 调用的防超时处理（下面代码节选 dubbogo)
func (c *Client) Request(request *remoting.</description>
    </item>
    
  </channel>
</rss>
